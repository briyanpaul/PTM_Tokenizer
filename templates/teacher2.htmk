<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Teacher Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <style>
        .current-meeting {
            background-color: #f8f9fa;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
        }
        .teacher-badge {
            font-size: 1.2rem;
            padding: 10px 15px;
        }
        #loadingIndicator {
            min-height: 200px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }
    </style>
</head>
<body>
    <div class="container py-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1>
                <span class="badge bg-primary teacher-badge" id="teacherBadge">
                    Teacher {{ teacher_id }}
                </span>
            </h1>
            <a href="/history?teacher_id={{ teacher_id }}" class="btn btn-outline-secondary">
                <i class="bi bi-clock-history"></i> View History
            </a>
        </div>

        <div class="current-meeting shadow-sm" id="currentMeetingContainer">
            <div class="text-center py-5" id="loadingIndicator">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2">Checking for current meetings...</p>
            </div>
            
            <div id="meetingInfo" style="display: none;">
                <h3 class="mb-4">Current Meeting</h3>
                <div class="row">
                    <div class="col-md-6">
                        <p><strong>Token:</strong> <span id="meetingToken"></span></p>
                        <p><strong>Parent:</strong> <span id="parentName"></span></p>
                        <p><strong>Child:</strong> <span id="childName"></span></p>
                    </div>
                    <div class="col-md-6">
                        <p><strong>RFID UID:</strong> <code id="cardUid"></code></p>
                        <p><strong>Started At:</strong> <span id="meetingTime"></span></p>
                    </div>
                </div>
                <button class="btn btn-success mt-3" id="completeBtn">
                    <i class="bi bi-check-circle"></i> Mark Meeting Complete
                </button>
            </div>
            
            <div class="text-center py-5" id="noMeetings" style="display: none;">
                <h4 class="text-muted">No current meetings</h4>
                <p>You'll be automatically assigned the next parent</p>
            </div>
        </div>

        <!-- Confirmation Modal -->
        <div class="modal fade" id="confirmModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Completion</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to mark this meeting as complete?</p>
                        <div class="mb-3">
                            <label for="passwordVerify" class="form-label">Re-enter Password</label>
                            <input type="password" class="form-control" id="passwordVerify" required>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-danger" id="confirmComplete">
                            <i class="bi bi-check-circle"></i> Confirm
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Alerts Container -->
        <div id="alertsContainer"></div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        const teacherId = {{ teacher_id }};
        let currentMeetingId = null;
        
        // Initialize Bootstrap modal
        const confirmModal = new bootstrap.Modal(document.getElementById('confirmModal'));
        
        // Check for current meetings
        function checkCurrentMeeting() {
            fetch(`/api/current_meeting?teacher_id=${teacherId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'no_meetings') {
                        document.getElementById('loadingIndicator').style.display = 'none';
                        document.getElementById('noMeetings').style.display = 'block';
                        document.getElementById('meetingInfo').style.display = 'none';
                    } else {
                        currentMeetingId = data.id;
                        document.getElementById('meetingToken').textContent = data.token;
                        document.getElementById('parentName').textContent = data.parent_name || 'Not registered';
                        document.getElementById('childName').textContent = data.child_name || 'Not registered';
                        document.getElementById('cardUid').textContent = data.card_uid;
                        document.getElementById('meetingTime').textContent = new Date(data.timestamp).toLocaleString();
                        
                        document.getElementById('loadingIndicator').style.display = 'none';
                        document.getElementById('noMeetings').style.display = 'none';
                        document.getElementById('meetingInfo').style.display = 'block';
                    }
                });
        }
        
        // Complete meeting button handler
        document.getElementById('completeBtn').addEventListener('click', () => {
            confirmModal.show();
        });
        
        // Confirm completion handler
        document.getElementById('confirmComplete').addEventListener('click', () => {
            const password = document.getElementById('passwordVerify').value;
            
            fetch('/verify_credentials', {
                method: 'POST',
                headers: {
                    'Authorization': 'Basic ' + btoa(`teacher${teacherId}:${password}`),
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (!response.ok) throw new Error('Invalid password');
                return fetch('/api/complete_meeting', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Basic ' + btoa(`teacher${teacherId}:${password}`)
                    },
                    body: JSON.stringify({
                        meeting_id: currentMeetingId,
                        current_teacher: `Teacher ${teacherId}`,
                        confirmation_token: generateConfirmationToken(currentMeetingId)
                    })
                });
            })
            .then(response => response.json())
            .then(data => {
                confirmModal.hide();
                if (data.status === 'success') {
                    showAlert(`Meeting completed! Parent assigned to ${data.next_teacher}`, 'success');
                    checkCurrentMeeting();
                }
            })
            .catch(error => {
                showAlert(error.message, 'danger');
            });
        });
        
        // Helper functions
        function generateConfirmationToken(meetingId) {
            return btoa(`confirm-${meetingId}`);
        }
        
        function showAlert(message, type) {
            const alert = `<div class="alert alert-${type} alert-dismissible fade show">
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>`;
            document.getElementById('alertsContainer').innerHTML = alert;
        }
        
        // Initial check and set interval
        checkCurrentMeeting();
        setInterval(checkCurrentMeeting, 5000);
    </script>
</body>
</html>
